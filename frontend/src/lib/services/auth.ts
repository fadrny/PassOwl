import { api } from './api-client';
import { 
    generateSalt, 
    generateLoginHash, 
    generateEncryptionKey,
    generateRSAKeyPair,
    encryptPrivateKey
} from './crypto';
import { encryptionKeyManager } from './encryption-key-manager';
import { KeyManager } from './key-manager';
import type { 
    UserCreate, 
    UserLogin, 
    UserSalts, 
    Token 
} from './api';
import type { ApiResponse } from '$lib/types/api';

export interface RegisterCredentials {
    username: string;
    password: string;
}

export interface LoginCredentials {
    username: string;
    password: string;
}

export class AuthService {
    /**
     * Registrace nov√©ho u≈æivatele s generov√°n√≠m asymetrick√Ωch kl√≠ƒç≈Ø
     */
    static async register(credentials: RegisterCredentials): Promise<ApiResponse<void>> {
        const { username, password } = credentials;

        try {
            // Generov√°n√≠ salt≈Ø
            const loginSalt = await generateSalt();
            const encryptionSalt = await generateSalt();

            // Generov√°n√≠ login hashe
            const loginPasswordHash = await generateLoginHash(password, loginSalt);

            // Generov√°n√≠ asymetrick√Ωch kl√≠ƒç≈Ø
            const { publicKey, privateKey } = await generateRSAKeyPair();
            
            // Za≈°ifrov√°n√≠ priv√°tn√≠ho kl√≠ƒçe master heslem
            const { encryptedData: encryptedPrivateKey, iv } = await encryptPrivateKey(privateKey, password, encryptionSalt);

            const registerRequest: UserCreate = {
                username: username.trim(),
                login_password_hash: loginPasswordHash,
                login_salt: loginSalt,
                encryption_salt: encryptionSalt,
                public_key: publicKey,
                encrypted_private_key: `${encryptedPrivateKey}:${iv}` // Ulo≈æ√≠me s IV
            };

            const response = await api.auth.registerUserAuthRegisterPost(registerRequest);
            return { data: undefined };
        } catch (error: any) {
            let errorMessage = 'Chyba p≈ôi registraci';
            
            if (error.status === 400) {
                errorMessage = 'U≈æivatelsk√© jm√©no ji≈æ existuje';
            } else if (error.status === 422) {
                errorMessage = 'Nespr√°vn√Ω form√°t dat';
            } else if (error.error?.detail) {
                errorMessage = error.error.detail;
            } else if (error.message && !error.status) {
                errorMessage = 'Nepoda≈ôilo se p≈ôipojit k serveru. Zkontrolujte internetov√© p≈ôipojen√≠.';
            }

            return {
                error: {
                    detail: errorMessage,
                    status: error.status
                }
            };
        }
    }

    /**
     * P≈ôihl√°≈°en√≠ u≈æivatele s odvozen√≠m ≈°ifrovac√≠ho kl√≠ƒçe
     */
    static async login(credentials: LoginCredentials): Promise<ApiResponse<{ access_token: string; token_type: string; encryptionSalt: string }>> {
        const { username, password } = credentials;

        try {
            // Z√≠sk√°n√≠ salt≈Ø
            const saltsResponse = await api.auth.getUserSaltsAuthSaltsGet({ username: username.trim() });
            const salts = saltsResponse.data as UserSalts;
            const { login_salt, encryption_salt } = salts;

            // Generov√°n√≠ login hashe
            const loginPasswordHash = await generateLoginHash(password, login_salt);

            const loginRequest: UserLogin = {
                username: username.trim(),
                login_password_hash: loginPasswordHash
            };

            // P≈ôihl√°≈°en√≠
            const loginResponse = await api.auth.loginUserAuthLoginPost(loginRequest);
            const token = loginResponse.data as Token;

            // Nastaven√≠ tokenu pro dal≈°√≠ API vol√°n√≠
            api.setSecurityData(token.access_token);

            // D≈ÆLE≈ΩIT√â: Odvozen√≠ a ulo≈æen√≠ ≈°ifrovac√≠ho kl√≠ƒçe do pamƒõti
            // P≈ôed√°v√°me encryption_salt p≈ô√≠mo, proto≈æe je≈°tƒõ nen√≠ v localStorage
            const keyDerived = await encryptionKeyManager.deriveAndStoreKey(password, encryption_salt);
            if (!keyDerived) {
                return {
                    error: {
                        detail: 'Nepoda≈ôilo se odvodit ≈°ifrovac√≠ kl√≠ƒç',
                        status: 500
                    }
                };
            }

            // P≈ôid√°n√≠ encryption saltu k odpovƒõdi
            return {
                data: {
                    access_token: token.access_token,
                    token_type: token.token_type,
                    encryptionSalt: encryption_salt
                }
            };
        } catch (error: any) {
            let errorMessage = 'Chyba p≈ôi p≈ôihl√°≈°en√≠';
            
            if (error.status === 401) {
                errorMessage = 'Nespr√°vn√© u≈æivatelsk√© jm√©no nebo heslo';
            } else if (error.status === 404) {
                errorMessage = 'Nespr√°vn√© u≈æivatelsk√© jm√©no nebo heslo';
            } else if (error.status === 400) {
                errorMessage = 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje';
            } else if (error.status === 422) {
                errorMessage = 'Nespr√°vn√Ω form√°t p≈ôihla≈°ovac√≠ch √∫daj≈Ø';
            } else if (error.error?.detail) {
                errorMessage = error.error.detail;
            } else if (error.message && !error.status) {
                errorMessage = 'Nepoda≈ôilo se p≈ôipojit k serveru. Zkontrolujte internetov√© p≈ôipojen√≠.';
            }

            return {
                error: {
                    detail: errorMessage,
                    status: error.status
                }
            };
        }
    }

    /**
     * Opƒõtovn√© odvozen√≠ kl√≠ƒçe s ovƒõ≈ôen√≠m hesla p≈ôes backend
     */
    static async rederiveKey(masterPassword: string): Promise<boolean> {
        try {
            // Nejd≈ô√≠ve mus√≠me ovƒõ≈ôit heslo p≈ôes backend
            const authResult = await this.verifyPasswordAndGetNewToken(masterPassword);
            
            if (!authResult.success) {
                console.error('Ovƒõ≈ôen√≠ hesla selhalo:', authResult.error);
                return false;
            }

            // Teprve po √∫spƒõ≈°n√©m ovƒõ≈ôen√≠ odvozujeme kl√≠ƒç
            const keySuccess = await encryptionKeyManager.deriveAndStoreKey(masterPassword);
            
            if (!keySuccess) {
                console.error('Odvozen√≠ kl√≠ƒçe selhalo i p≈ôes spr√°vn√© heslo');
                return false;
            }

            console.log('üîë Kl√≠ƒç byl √∫spƒõ≈°nƒõ znovu odvozen s nov√Ωm JWT tokenem');
            return true;
        } catch (error) {
            console.error('Error during reauth:', error);
            return false;
        }
    }

    /**
     * Ovƒõ≈ôen√≠ hesla p≈ôes backend a z√≠sk√°n√≠ nov√©ho JWT tokenu
     */
    private static async verifyPasswordAndGetNewToken(masterPassword: string): Promise<{
        success: boolean;
        error?: string;
        token?: string;
    }> {
        try {
            // Z√≠sk√°me aktu√°ln√≠ username z localStorage
            const { AuthStore } = await import('$lib/stores/auth');
            const currentToken = AuthStore.getAccessToken();
            
            if (!currentToken) {
                return { success: false, error: 'Chyb√≠ p≈ôihla≈°ovac√≠ token' };
            }

            // Dek√≥dujeme JWT token pro z√≠sk√°n√≠ username (jednoduch√© dek√≥dov√°n√≠ bez verifikace)
            const payload = this.decodeJwtPayload(currentToken);
            if (!payload || !payload.sub) {
                return { success: false, error: 'Neplatn√Ω token' };
            }

            const username = payload.sub;

            // Z√≠sk√°n√≠ salt≈Ø pro u≈æivatele
            const saltsResponse = await api.auth.getUserSaltsAuthSaltsGet({ username });
            const salts = saltsResponse.data as UserSalts;
            const { login_salt } = salts;

            // Generov√°n√≠ login hashe pro ovƒõ≈ôen√≠
            const loginPasswordHash = await generateLoginHash(masterPassword, login_salt);

            const loginRequest: UserLogin = {
                username,
                login_password_hash: loginPasswordHash
            };

            // Pokus o p≈ôihl√°≈°en√≠ (ovƒõ≈ôen√≠ hesla)
            const loginResponse = await api.auth.loginUserAuthLoginPost(loginRequest);
            const token = loginResponse.data as Token;

            // Aktualizace tokenu v aplikaci
            api.setSecurityData(token.access_token);
            AuthStore.setAuthData(token.access_token, username, AuthStore.getEncryptionSalt()!);

            return { 
                success: true, 
                token: token.access_token 
            };
        } catch (error: any) {
            let errorMessage = 'Ovƒõ≈ôen√≠ hesla selhalo';
            
            if (error.status === 401) {
                errorMessage = 'Nespr√°vn√© heslo';
            } else if (error.status === 404) {
                errorMessage = 'U≈æivatel nenalezen';
            } else if (error.error?.detail) {
                errorMessage = error.error.detail;
            }

            return { 
                success: false, 
                error: errorMessage 
            };
        }
    }

    /**
     * Jednoduch√© dek√≥dov√°n√≠ JWT payload (bez verifikace)
     */
    private static decodeJwtPayload(token: string): any {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                return null;
            }

            const payload = parts[1];
            const decoded = atob(payload.replace(/-/g, '+').replace(/_/g, '/'));
            return JSON.parse(decoded);
        } catch (error) {
            console.error('Error decoding JWT:', error);
            return null;
        }
    }

    /**
     * Opƒõtovn√© odvozen√≠ kl√≠ƒçe s refreshem JWT tokenu (alias pro zpƒõtnou kompatibilitu)
     */
    static async rederiveKeyWithTokenRefresh(masterPassword: string): Promise<boolean> {
        return this.rederiveKey(masterPassword);
    }
}
